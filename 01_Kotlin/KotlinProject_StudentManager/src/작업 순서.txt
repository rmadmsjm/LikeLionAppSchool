step01) src 폴더에 각 역할에 대한 패키지 생성

com.lion.project1.controller
com.lion.project1.model
com.lion.project1.view
com.lion.project1.dao
com.lion.project1.activity
com.lion.project1.util

-------------------------------------------------------------------------------------------------------

step02) 프로그램의 상태를 정의하고, 상태에 대한 열거형을 정의함(util 패키지)

총 6가지의 상태로 구분
1. 메뉴를 보여주는 상태
2. 학생 정보를 입력하는 상태
3. 학생 정보를 검색하는 상태
4. 학생 정보 전체를 출력하는 상태
5. 학생 각 과목별 총점과 평균을 확인하는 상태
6. 종료 상태

ValueUtil.kt

package com.lion.project1.util

// 프로그램 전체 상태를 정의
enum class ProgramState {
    // 메뉴를 보여주는 상태
    PROGRAM_STATE_SHOW_MENU,
    //학생 정보를 입력하는 상태
    PROGRAM_STATE_INPUT_STUDENT_INFO,
    // 학생 정보를 검색하는 상태
    PROGRAM_STATE_SEARCH_STUDENT_INFO,
    // 학생 정보 전체를 출력하는 상태
    PROGRAM_STATE_SHOW_STUDENT_INFO_ALL,
    // 각 과목별 총점과 평균을 확인하는 상태
    PROGRAM_STATE_SHOW_POINT_TOTAL_AVG,
    // 종료 상태
    PROGRAM_STATE_TERMINATE
}

-------------------------------------------------------------------------------------------------------

step03) MainController 파일 생성

기본 코드 작성

    // main 함수가 호출하는 메서드
    fun run(){

    }

    // 상태값에 따라 객체를 생성해서 반환하는 메서드
    fun getStateClass(){

    }


-------------------------------------------------------------------------------------------------------

step04) 모든 Activity 가 상속 받을 BaseActivity 파일 생성

abstract class BaseActivity {

    // 초기화 메서드
    abstract fun initActivity()

    // 데이터 처리 메서드
    abstract fun processActivity()

    // 화면에 그리는 처리
    abstract fun showActivity()

    // 수행이 끝났을 때 호출되는 메서드
    abstract fun finishActivity()
}

-------------------------------------------------------------------------------------------------------

step05) main.kt 에서 MainController 객체 생성후 run 메서드 호출

import com.lion.project1.controller.MainController

fun main() {
    // Controller의 run 메서드를 호출한다.
    val mainController = MainController()
    mainController.run()
}

-------------------------------------------------------------------------------------------------------

step06) 상태값을 담을 변수 정의

MainController.kt

    // 상태값을 담을 변수
    val programState = ProgramState.PROGRAM_STATE_SHOW_MENU

-------------------------------------------------------------------------------------------------------

step07) 생태별로 분기

MainController.kt

    // 상태값에 따라 객체를 생성해서 반환하는 메서드
    fun getStateClass() = when(programState){
        ProgramState.PROGRAM_STATE_SHOW_MENU -> null
        ProgramState.PROGRAM_STATE_INPUT_STUDENT_INFO -> null
        ProgramState.PROGRAM_STATE_SEARCH_STUDENT_INFO -> null
        ProgramState.PROGRAM_STATE_SHOW_STUDENT_INFO_ALL -> null
        ProgramState.PROGRAM_STATE_SHOW_POINT_TOTAL_AVG -> null
        ProgramState.PROGRAM_STATE_TERMINATE -> null
    }

-------------------------------------------------------------------------------------------------------

step08) 각 상태별 Activity 클래스 생성

-------------------------------------------------------------------------------------------------------

step09) 각 상태별 객체 생성 코드 작성

MainController.kt

    // 상태값에 따라 객체를 생성해서 반환하는 메서드
    fun getStateClass() = when(programState){
        ProgramState.PROGRAM_STATE_SHOW_MENU -> ShowMenuActivity()
        ProgramState.PROGRAM_STATE_INPUT_STUDENT_INFO -> InputStudentInfoActivity()
        ProgramState.PROGRAM_STATE_SEARCH_STUDENT_INFO -> SearchStudentInfoActivity()
        ProgramState.PROGRAM_STATE_SHOW_STUDENT_INFO_ALL -> ShowStudentInfoAllActivity()
        ProgramState.PROGRAM_STATE_SHOW_POINT_TOTAL_AVG -> ShowPointTotalAvgActivity()
        ProgramState.PROGRAM_STATE_TERMINATE -> TerminateActivity()
    }

-------------------------------------------------------------------------------------------------------

step10) MainController.kt 의 run 메서드에 showActivity 메서드 호출 코드 작성

        // 화면을 출력하는 메서드를 호출한다.
        activity.showActivity()

-------------------------------------------------------------------------------------------------------

step11) ShowMenuActivity.kt 의 showActivity  구현

    override fun showActivity() {
        println("[ 메인 메뉴 ]")
        println("1. 학생 정보 입력")
        println("2. 학생 정보 검색")
        println("3. 학생 정보 전체 출력")
        println("4. 각 과목별 총점과 평균 확인")
        println("5. 종료")
        print("번호를 입력해주세요 : ")
    }

-------------------------------------------------------------------------------------------------------

step12) InputStudentInfoActivity.kt 의 showActivity 구현

    override fun showActivity() {
        println("[ 학생정보 입력 ]")
        println("현재 입력된 학생 수 : 10명")
        println("학생 이름 :")
        println("학생 나이 :")
        println("국어 점수 :")
        println("영어 점수 :")
        println("수학 점수 :")
    }

-------------------------------------------------------------------------------------------------------

step13) 각 상태별로 필요한 기능 정리

상태는 MainController에서 함

1. 메뉴를 보여주는 상태
   - 메뉴 번호 입력 받는 기능
   - 메뉴 번호를 잘못 입력 햇을 경우 안내 문구 기능

2. 학생 정보 입력하는 상태
   - 현재 입력된 학생 수 보여주는 기능
   - 학생의 정보 입력하는 기능
   - 입력 받은 학생 정보 저장하는 기능 (잘못 입력된 경우 대비함)

3. 학생 정보 검색 상태
   - 학생 이름 입벽 받는 기능
   - 입력 받은 학생 정보 출력 기능 (동명이인의 경우, 해당 정보 모두 출력)
   - 학생 정보 없을 경우 안내 문구 기능

4. 학생 전체 정보 출력 상태
   - 학생 한 명의 정보 출력 기능
   - 모든 학생의 정보 출력 기능
   - 입력한 학생 정보가 없을 경우 안내 문구 기능

5. 각 과목별 총점과 평균 출력 상태
   - 각 과목별 총점 계산 기능
   - 각 과목별 평균 계산 기능
   - 입력한 학생 정보가 없을 경우 안내 문구 기능

6. 프로그램 종료 상태
   - 프로그램 종료 기능
   - 종료 안내 문구 출력 기능

-------------------------------------------------------------------------------------------------------

step14) 정리한 기능을 그룹으로 묶기

1. 메뉴를 보여주는 상태
   - 메뉴 번호 입력 받는 기능 -> 상태에 대한 기능
   - 메뉴 번호를 잘못 입력 햇을 경우 안내 문구 기능 -> 상태에 대한 기능

2. 학생 정보 입력하는 상태
   - 현재 입력된 학생 수 보여주는 기능 -> 상태에 대한 기능
   - 학생의 정보 입력하는 기능 -> 상태에 대한 기능
   - 입력 받은 학생 정보 저장하는 기능 (잘못 입력된 경우 대비함) -> 상태에 대한 기능

3. 학생 정보 검색 상태
   - 학생 이름 입벽 받는 기능 -> 상태에 대한 기능
   - 입력 받은 학생 정보 출력 기능 (동명이인의 경우, 해당 정보 모두 출력) -> 상태에 대한 기능, 학생
   - 학생 정보 없을 경우 안내 문구 기능 -> 상태에 대한 기능

4. 학생 전체 정보 출력 상태
   - 학생 한 명의 정보 출력 기능 -> 학생
   - 모든 학생의 정보 출력 기능 -> 상태에 대한 기능
   - 입력한 학생 정보가 없을 경우 안내 문구 기능 -> 상태에 대한 기능

5. 각 과목별 총점과 평균 출력 상태
   - 각 과목별 총점 계산 기능 -> 상태에 대한 기능
   - 각 과목별 평균 계산 기능 -> 상태에 대한 기능
   - 입력한 학생 정보가 없을 경우 안내 문구 기능 -> 상태에 대한 기능

6. 프로그램 종료 상태
   - 프로그램 종료 기능 -> 상태에 대한 기능
   - 종료 안내 문구 출력 기능 -> 상태에 대한 기능

-------------------------------------------------------------------------------------------------------

step15) 필요한 데이터 정리

1. 메뉴를 보여주는 상태
   - 선택한 메뉴의 번호
   - 메뉴의 전체 번호

2. 학생 정보 입력하는 상태
   - 현재 입력된 학생 수
   - 학생 이름
   - 학생 나이
   - 학생 국어 점수
   - 학생 영어 점수
   - 학생 수학 점수

3. 학생 정보 검색 상태
   - 검색할 학생 이름
   - 학생들 정보 : 이름
   - 검색된 학생 정보

4. 학생 전체 정보 출력 상태
   - 학생 개인 정보
   - 전체 학생 수
   - 학생 전체 정보

5. 각 과목별 총점과 평균 출력 상태
   - 각 과목별 학생들 점수
   - 전체 학생 수
   - 각 과목별 총점
   - 각 과목별 평균

6. 프로그램 종료 상태

-------------------------------------------------------------------------------------------------------

step15) 필요한 데이터 묶기

1. 메뉴를 보여주는 상태
   - 선택한 메뉴의 번호 -> 상태
   - 메뉴의 전체 번호 -> 상태

2. 학생 정보 입력하는 상태
   - 현재 입력된 학생 수 -> 상태
   - 학생 이름 -> 학생
   - 학생 나이 -> 학생
   - 학생 국어 점수 -> 학생
   - 학생 영어 점수 -> 학생
   - 학생 수학 점수 -> 학생

3. 학생 정보 검색 상태
   - 검색할 학생 이름 -> 상태
   - 학생들 정보 : 이름 -> 상태
   - 검색된 학생 정보 -> 학생

4. 학생 전체 정보 출력 상태
   - 학생 개인 정보 -> 학생
   - 전체 학생 수 -> 상태
   - 학생 전체 정보 -> 상태

5. 각 과목별 총점과 평균 출력 상태
   - 각 과목별 학생들 점수 -> 상태
   - 전체 학생 수 -> 상태
   - 각 과목별 총점 -> 상태
   - 각 과목별 평균 -> 상태

6. 프로그램 종료 상태

-------------------------------------------------------------------------------------------------------

step17) 학생 클래스 및 각 상태별 클래스에 프로퍼티와 메서드를 정의한다.

-------------------------------------------------------------------------------------------------------

step18) ShowMenuActivity의 메서드 구현

-------------------------------------------------------------------------------------------------------

step19) MainController 에 상태값 변경시키는 메서드 구현

    // 상태 값을 변경하는 메서드
    fun setProgramState(programState: ProgramState){
        this.programState = programState
    }

ShowMenuActivity 의 주 생성자 추가
(var mainController: MainController)

ShowMenuActivity 객체 생성시 mainController 주소값 전달
ProgramState.PROGRAM_STATE_SHOW_MENU -> ShowMenuActivity(this)

ValueUtil에 각 메뉴를 나타내는 상수값 정의
// 각 메뉴
enum class MenuNumber(var num:Int){
    // 학생 정보 입력
    MAIN_MENU_INPUT_STUDENT_INFO(1),
    // 학생 정보 검색
    MAIN_MENU_SEARCH_STUDENT_INFO(2),
    // 학생 정보 전체 출력
    MAIN_MENU_SHOW_STUDENT_INFO_ALL(3),
    // 각 과목별 총점과 평균 확인
    MAIN_MENU_SHOW_POINT_TOTAL_AVG(4),
    // 종료
    MAIN_MENU_TERMINATE(5)
}

ShowMenuActivity의 finishActivity 메서드 구현

override fun finishActivity() {
        // 사용자가 입력한 메뉴 번호에 따라 프로그램의 상태를 변경한다.
        when(menuNumber){
            // 학생 정보를 입력
            MenuNumber.MAIN_MENU_INPUT_STUDENT_INFO.num ->
                mainController.setProgramState(ProgramState.PROGRAM_STATE_INPUT_STUDENT_INFO)
            // 학생 정보를 검색
            MenuNumber.MAIN_MENU_SEARCH_STUDENT_INFO.num ->
                mainController.setProgramState(ProgramState.PROGRAM_STATE_SEARCH_STUDENT_INFO)
            // 모든 학생의 정보를 출력
            MenuNumber.MAIN_MENU_SHOW_STUDENT_INFO_ALL.num ->
                mainController.setProgramState(ProgramState.PROGRAM_STATE_SHOW_STUDENT_INFO_ALL)
            // 과목별 총점과 평균을 출력
            MenuNumber.MAIN_MENU_SHOW_POINT_TOTAL_AVG.num ->
                mainController.setProgramState(ProgramState.PROGRAM_STATE_SHOW_POINT_TOTAL_AVG)
            // 종료
            MenuNumber.MAIN_MENU_TERMINATE.num ->
                mainController.setProgramState(ProgramState.PROGRAM_STATE_TERMINATE)
        }
    }

-------------------------------------------------------------------------------------------------------

step20) InputStudentInfoActivity구현

showStudentCnt 구현

    // 현재 입력된 학생의 수를 보여주는 기능
    fun showStudentCnt(){
        if(studentList != null){
            println("현재 입력된 학생 수 : ${studentList?.size}명")
        } else {
            println("현재 입력된 학생 수 : 0명")
        }
    }

inputStudentInfo 구현

// 학생의 정보를 입력받는 기능
    fun inputStudentInfo(){
        var name = ""
        var age = -1
        var kor = -1
        var eng = -1
        var math = -1

        print("학생 이름 :")
        name = scanner.next()

        do {
            try {
                print("학생 나이 :")
                age = scanner.nextInt()

                if(age !in 0..200){
                    println("나이는 0 ~ 200까지의 값을 넣어주세요")
                }
            }catch(e:NumberFormatException){
                println("나이는 숫자로 입력해주세요")
            }
        } while(age !in 0..200)

        print("국어 점수 :")
        kor = scanner.nextInt()
        print("영어 점수 :")
        eng = scanner.nextInt()
        print("수학 점수 :")
        math = scanner.nextInt()

        studentModel = StudentModel(name, age, kor, eng, math)
    }

 showActivity 수정

     override fun showActivity() {
         println()
         println("[ 학생정보 입력 ]")
         // 현재 학생 수를 출력한다.
         showStudentCnt()
         // 현재 학생의 정보를 입력받는다.
         inputStudentInfo()

     }

-------------------------------------------------------------------------------------------------------

step21) UserInfoDAO 에 메서드 구현

companion object{
        // 파일 있는지 확인하는 메서드
        fun isExistUserInfoFile():Boolean{
            // File 객체를 생성한다.
            val saveFile = File("userData.dat")
            // 파일이 존재하는지 확인한다.
            // 파일이 있으면 true를 반환하고 없으면 false를 반환한다.
            return saveFile.exists()
        }

        // 파일에서 데이터를 읽어와 ArrayList에 담고 반환한다.
        fun getStudentInfoList():ArrayList<StudentModel>?{
            // 파일이 없다면 null을 반환한다.
            if(isExistUserInfoFile() == false){
                return null
            }
            return null
        }
    }

InputStudentInfoActivity 에서 메서드 호출

        // 학생정보를 가져온다.
        studentList = UserInfoDAO.getStudentInfoList()

-------------------------------------------------------------------------------------------------------

step22) StudentModel 클래스에 Seriealizable 인터페이스 구현을 추가한다.

// 객체를 외부에 보내려면(파일에 저장하려면) Serializable 인터페이스를 구현해야 한다.
class StudentModel(var name:String, var age:Int, var kor:Int, var eng:Int, var math:Int) : Serializable {

-------------------------------------------------------------------------------------------------------

step23) UserInfoDAO 에 객체를 파일에 쓰는 메서드 구현

        // 데이터를 파일에 쓴다.
        fun saveStudentInfoList(dataList:ArrayList<StudentModel>){
            // 파일에 데이터를 쓰기 위핸 기본 스트림 생성한다.
            // 쓰기를 할 때는 파일이 없을 경우 파일이 생성된다.
            val fileOutputStream = FileOutputStream("userData.dat")
            // 객체를 파일에 쓸 수 있는 형태로 가공하는 필터스트림 생성하여 연결한다.
            val objectOuputStream = ObjectOutputStream(fileOutputStream)
            // 객체를 파일에 쓴다.
            objectOuputStream.writeObject(dataList)
            // 파일을 닫아준다.
            objectOuputStream.flush()
            objectOuputStream.close()
            fileOutputStream.close()
        }
    }

-------------------------------------------------------------------------------------------------------

step24) InputStudentInfoActivity 에 saveStudentInfo 메서드 구현

    // 입력받은 학생의 정보를 저장하는 기능
    fun saveStudentInfo(){
        // ArrayList가 null 이면 객체를 생성해준다.
        if(studentList == null){
            studentList = ArrayList<StudentModel>()
        }

        // 객체를 ArrayList에 담아준다.
        studentList?.add(studentModel)
        // 파일에 저장한다.
        UserInfoDAO.saveStudentInfoList(studentList!!)
    }

구현한 메서드를 호출한다.

        // 학쟁 정보를 파일에 쓴다.
        saveStudentInfo()

-------------------------------------------------------------------------------------------------------

step25) UserInfoDAO 에 getStudentInfoList 코드 구현

            // 파일에서 데이터를 읽어올 기본 스트림을 생성한다.
            val fileInputStream = FileInputStream("userData.dat")
            // 읽어온 데이터를 객체로 복원하는 필터 스트림을 생성한다.
            val objectInputStraem = ObjectInputStream(fileInputStream)
            // 읽어온다.
            val resultList = objectInputStraem.readObject() as ArrayList<StudentModel>
            // 파일을 닫아준다.
            objectInputStraem.close()
            fileInputStream.close()

            // 객체를 반환한다.
            return resultList

-------------------------------------------------------------------------------------------------------

step26) InputStudentInfoActivity에 주생성자 추가

(var mainController: MainController)

finishActivity 메서드에서 프로그램의 상태를 메뉴를 보여주는 상태로 설정

        // 작업 완료 후 상태를 메뉴를 보여주는 상태로 변경한다.
        mainController.setProgramState(ProgramState.PROGRAM_STATE_SHOW_MENU)


MainController 에서 InputStudentInfoActivity 객체 생성시 자기 자신을 전달한다.

ProgramState.PROGRAM_STATE_INPUT_STUDENT_INFO -> InputStudentInfoActivity(this)

-------------------------------------------------------------------------------------------------------

step27) SearchStudentInfoActivity 구현

변수 선언

    // 학생들의 정보를 담을 ArrayList
    var studentList:ArrayList<StudentModel>? = null
    // 검색할 학생의 이름
    lateinit var serachName:String

학생 정보를 가져온다.

        // 학생들의 정보를 가져온다.
        studentList = UserInfoDAO.getStudentInfoList()

학생 정보가 없을 경우 구현
        // 저장된 학생 정보가 없다면
        println()
        println("[ 학생 정보 검색 ]")
        if(studentList == null){
            println("저장된 학생 정보가 없습니다.")
        } else {

        }

        println("검색할 학생 이름 : ")
        println("학생 이름 : 0000 ")
        println("학생 나이 : 0000 ")
        println("국어 점수 : 0000 ")
        println("영어 점수 : 0000 ")
        println("수학 점수 : 0000 ")

Scanner 생성
    // 입력을 위한 스캐너
    lateinit var scanner: Scanner

    override fun initActivity() {
        // 학생들의 정보를 가져온다.
        studentList = UserInfoDAO.getStudentInfoList()
        // 스캐너 생성
        scanner = Scanner(System.`in`)
    }

inputSearchName  메서드 구현
    // 검색할 학생의 이름을 입력받는 기능
    fun inputSearchName(){
        print("검색할 학생 이름 : ")
        serachName = scanner.next()
    }

 printSearchResult 메서드 구현
     // 검색된 학생들의 정보를 출력하는 메서드
     fun printSearchResult(){
         // 검색된 학생의 수
         var findCnt = 0
         // ArrayList가 관리하는 객체의 수 만큼 반복한다.
         studentList?.forEach{
             // 현재 반복번째 학생의 이름이 검색어와 같다면 출력한다.
             if(it.name == serachName){
                 println()
                 it.printStudentInfo()
                 // 검색된 학생 수를 증가시킨다
                 findCnt++
             }
         }
         // 검색된 학생이 없다면
         if(findCnt == 0){
             println("검색된 학생이 없습니다.")
         }
     }

showActivity 메서드 내의 else 문 구현

            // 검색어를 입력받는다.
            inputSearchName()
            // 검색 결과를 출력한다.
            printSearchResult()

StudentModel.kt 파일의 printStudentInfo 메서드 구현
    // 학생 한명의 정보를 출력하는 메서드
    fun printStudentInfo(){
        println()
        println("학생 이름 : $name ")
        println("학생 나이 : $age ")
        println("국어 점수 : $kor ")
        println("영어 점수 : $eng ")
        println("수학 점수 : $math ")
    }

-------------------------------------------------------------------------------------------------------

step28)
MainController 의 SearchStudentInfoActivity 객체 생성 부분에 this 설정
SearchStudentInfoActivity(this)

SearchStudentInfoActivity 에 주생성자 설정
(var mainController: MainController)

finishActivity 메서드 구현
    override fun finishActivity() {
        mainController.setProgramState(ProgramState.PROGRAM_STATE_SHOW_MENU)
    }

-------------------------------------------------------------------------------------------------------

step29)
MainController 에서 ShowStudentInfoAllActivity 생성시 자기 자신 전달하기
ShowStudentInfoAllActivity(this)

ShowStudentInfoAllActivity의 주 생성자 추가
(var mainController: MainController)

학생 정보를 담을 ArrayList 선언
    // 학생 정보를 담을 ArrayList
    var studentList:ArrayList<StudentModel>? = null

initActivity 메서드에서 학생 정보를 가져온다.
        // 학생 정보를 가져온다.
        studentList = UserInfoDAO.getStudentInfoList()

showActivity 메서드에 if 문 구현
        // 학생 정보가 없다면
        if(studentList == null){
            println("저장된 학생 정보가 없습니다.")
        } else {

        }

printStudentInfoAll 메서드 구현
    // 모든 학생들의 정보를 출력하는 메서드
    fun printStudentInfoAll(){
        // 학생 객체의 수 만큼 반복한다.
        studentList?.forEach{
            println()
            println("학생 이름 : ${it.name}")
            println("학생 나이 : ${it.age}")
            println("국어 점수 : ${it.kor}")
            println("영어 점수 : ${it.eng}")
            println("수학 점수 : ${it.math}")
        }
    }

showActivity 메서드의 else에 printStudentInfoAll 메서드 호출
            // 학생 정보가 있다면 출력한다.
            printStudentInfoAll()

finishActivity 메서드에서 프로그램 상태를 메뉴 상태로 변경

    override fun finishActivity() {
        mainController.setProgramState(ProgramState.PROGRAM_STATE_SHOW_MENU)
    }

-------------------------------------------------------------------------------------------------------

step30)
MainController의 ShowPointTotalAvgActivity 객체 생성시 자기 자신 넘겨주기
ShowPointTotalAvgActivity(this)

ShowPointTotalAvgActivity에 주 생성자 추가
(var mainController: MainController)

프로퍼티들 정의
    // 학생의 정보를 담을 ArrayList
    var studentList:ArrayList<StudentModel>? = null
    // 총점들을 담을 프로퍼티
    var korTotal = 0
    var engTotal = 0
    var mathTotal = 0
    // 평균들을 담을 프로퍼티
    var korAvg = 0
    var engAvg = 0
    var mathAvg = 0

initActivity에서 학생들의 정보를 가져온다.
        // 학생들의 정보를 가져온다.
        studentList = UserInfoDAO.getStudentInfoList()

getPointTotal 메서드 구현

    // 과목별 총점을 구하는 메서드
    fun getPointTotal(){
        // 각 과목별 총점을 구한다.
        studentList?.forEach{
            korTotal += it.kor
            engTotal += it.eng
            mathTotal += it.math
        }
    }

getPointAvg 메서드 구현
    // 과목별 평균을 구하는 메서드
    fun getPointAvg(){
        korAvg = korTotal / studentList!!.size
        engAvg = engTotal / studentList!!.size
        mathAvg = mathTotal / studentList!!.size
    }

processActivity 메서드 구현
    override fun processActivity() {

        if(studentList != null){
            // 총점을 구한다
            getPointTotal()
            // 평균을 구한다.
            getPointAvg()
        }
    }

showActivity 메서드에 if 문 구현
        println()
        println("[ 점수 통계 ]")

        if(studentList == null){
            println("저장된 학생 정보가 없습니다")
        } else {

        }

showActivity의 else 부분 구현
            println()
            println("국어 총점 : $korTotal")
            println("영어 총점 : $engTotal")
            println("수학 총점 : $mathTotal")
            println("국어 평균 : $korAvg")
            println("영어 평균 : $engAvg")
            println("수학 평균 : $mathAvg")

finishActivity 메서드 구현
    override fun finishActivity() {
        mainController.setProgramState(ProgramState.PROGRAM_STATE_SHOW_MENU)
    }

-------------------------------------------------------------------------------------------------------

step31) TerminateActivity 의 showActivity

    override fun showActivity() {
        println("프로그램이 종료되었습니다.")
        // 프로그램을 종료한다.
        exitProcess(0)
    }




